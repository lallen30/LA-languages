:host {
  ion-list { padding: 0; }
  ion-item { --inner-padding-end: 16px; }
  /* Do NOT force center alignment; allow stacked labels to flow vertically */
  /* Ensure selects expand and are visible, especially with a start icon */
  ion-item ion-select {
    display: block;
    width: 100%;
  }

  /* Make the select row comfortably tall on iOS to ensure the trigger is visible */
  ion-item.select-row {
    --min-height: 64px;
  }

  /* Standalone select styling to ensure visibility when not inside ion-item */
  ion-select.language-select {
    display: block;
    width: 100%;
    margin: 8px 0 4px 0;
    padding: 0 16px;
  }
  /* TEMP debug visuals; safe to remove after verification */
  /* ion-select.language-select { border: 1px dashed var(--ion-color-medium); border-radius: 8px; } */

  /* Lay out label + control ourselves (no end slot needed) */
  .row {
    display: grid;
    grid-template-columns: 1fr auto; /* label then control */
    column-gap: 12px;
    width: 100%;
    min-width: 0;
  }

  .row ion-label {
    min-width: 0;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  /* Controls at the end: guaranteed footprint */
  .row .end { min-width: 0; }
  .row ion-select.end { min-width: 160px; }  /* adjust to taste */
  .row ion-toggle.end { min-width: 72px;  }

  /* Native Ionic layout support (slot="end") */
  ion-item ion-select[slot="end"] {
    flex: 0 0 auto;
    min-width: 160px;
    margin-inline-start: auto; /* ensure it sits at the end on iOS */
  }

  /* When you re-add ranges */
  .row .fill { width: 100%; height: 44px; }

  /* Make select/toggle readable regardless of theme variables */
  ion-select::part(text),
  ion-select::part(placeholder) { color: var(--ion-text-color, #111); opacity: 1; }
  ion-select::part(icon) { color: var(--ion-text-color, #111); }
  ion-toggle::part(track) {
    background: color-mix(in srgb, var(--ion-text-color, #111) 20%, transparent);
  }
  ion-toggle.toggle-checked::part(track) {
    background: color-mix(in srgb, var(--ion-color-primary, #428cff) 55%, transparent);
  }
  ion-toggle::part(handle) { background: #fff; }
}

/* Temporary: confirm no style is collapsing ion-select on iOS */
:host-context(.ios) ion-select {
  display: block !important;
  visibility: visible !important;
  min-height: 44px !important;
  --padding-start: 0; /* optional, keeps it neat in stacked mode */
}
:host-context(.ios) ion-item ion-select { width: 100%; } /* avoid zero-width flex bugs */

/* 1) Make sure the field actually has a box on iOS */
:host-context(.ios) ion-item > ion-select {
  display: block !important;
  min-height: 44px !important;   /* standard row height */
  width: 100% !important;
  flex: 1 1 auto !important;     /* prevents zero-width flex collapse */
}

/* 2) If any global reset set 'display: contents' on form controls, undo it */
:host-context(.ios) ion-select {
  display: block !important;
}

/* 3) If a flex wrapper is forcing center alignment, stretch the row */
:host-context(.ios) ion-item {
  align-items: stretch !important;
}

/* 4) TEMP: draw a border around the selectâ€™s visible container to confirm it renders */
:host-context(.ios) ion-select::part(container) {
  border: 1px dashed rgba(0,0,0,.3);
  border-radius: 8px;
  min-height: 44px;
  padding: 6px 10px;
}
